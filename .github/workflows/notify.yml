name: Notify Release on Telegram

on:
  workflow_call:
  workflow_dispatch:

jobs:
  Notify_Release:
    name: Notify Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Switch to release branch
        run: git checkout -f release || git switch --discard-changes --orphan update
        
      - name: Update release JSON
        run: |
          curl https://api.github.com/repos/${{ github.repository }}/releases/latest > release.json
          
      - name: Get current date
        id: date
        run: echo "Date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          
      - name: Push release.json
        uses: stefanzweifel/git-auto-commit-action@v4.15.4
        with:
          branch: release
          skip_checkout: true
          file_pattern: release.json
          commit_message: Update release.json on ${{ steps.date.outputs.date }}
          push_options: '-f -u'
          
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' 
      - uses: jannekem/run-python-script-action@v1.5
        id: pyscript
        with:
          script: |
            import json
            import re

            # Read release.json file
            with open('release.json', 'r') as f:
                release = json.load(f)

            print(re.findall(r"CLI:[a-zA-Z-.\s0-9:]+\n", release['body'])[0] or "")

            print("*ðŸ“¦ Downloads*")
            # Collect browser_download_url from assets in release
            # for asset in release['assets'][::-1]:
                # print(f"ðŸ”— [{asset['name']}]({asset['browser_download_url']})")
            nonroot_files = []
            root_files = []
            
            for asset in release['assets'][::-1]:
                file_name = asset['name']
                file_url = asset['browser_download_url']
                if '.Zip' in file_name:
                  root_files.append(f"ðŸ”— [{file_name}]({file_url})")
                else:
                  nonroot_files.append(f"ðŸ”— [{file_name}]({file_url})")
                  
            print("Non-Root:")
            print("\n".join(nonroot_files))
            
            print()
            
            print("Magisk (Root):")
            print("\n".join(root_files))

      - name: Telegram Channel Update
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            **ReVanced YouTube magisk**
            
            *NEW RELEASE*

            Date: ${{ steps.date.outputs.Date }}
            
            ${{ steps.pyscript.outputs.stdout }}

            *â‰£ Note:*
              âžœ `mindetach.zip` is used to detach play store updates for YouTube and YouTube Music for rooted users.
              âžœ Use [MicroG APK](https://github.com/inotia00/VancedMicroG/releases/latest/download/microg.apk) for non root YouTube and YouTube Music.

            Github: [ReVanced YouTube magisk repo](https://github.com/Kingsmanvn-Official/Revanced-tool)

            [Donate Website](https://kingsmanvn.cf)
            [Paypal](http://paypal.me/kingsmanvn)
            [Buy me a coffee â˜•](https://www.buymeacoffee.com/kingsmanvn)
            **99966889999999 - MB Bank**

            Thanks

